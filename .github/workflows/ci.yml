name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_STORIES: ${{ github.repository }}/stories-service
  IMAGE_NAME_WORKER: ${{ github.repository }}/ephemeral-worker

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          # Run tests and check if there are any actual test files
          TEST_OUTPUT=$(go test -v ./... 2>&1)
          echo "$TEST_OUTPUT"
          
          # Check for test failures
          if echo "$TEST_OUTPUT" | grep -q "FAIL"; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          
          # Check if we have any actual tests
          if echo "$TEST_OUTPUT" | grep -q "=== RUN"; then
            echo "‚úÖ Tests passed"
          else
            echo "‚ö†Ô∏è  No test files found - this is OK for now"
          fi

      - name: Run go vet
        run: go vet ./...

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - name: stories-service
            dockerfile: Dockerfile.stories
            image: ${{ github.repository }}/stories-service
          - name: ephemeral-worker
            dockerfile: Dockerfile.worker
            image: ${{ github.repository }}/ephemeral-worker
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write
    strategy:
      matrix:
        service: [stories-service, ephemeral-worker]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Images ready for deployment
        run: |
          echo "‚úÖ All images built and pushed successfully!"
          echo "üöÄ Images available at:"
          echo "   - ${{ env.REGISTRY }}/${{ github.repository }}/stories-service:latest"
          echo "   - ${{ env.REGISTRY }}/${{ github.repository }}/ephemeral-worker:latest"
