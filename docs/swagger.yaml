basePath: /
definitions:
  media.MediaInfoResponse:
    properties:
      content_type:
        type: string
      media_url:
        type: string
      object_key:
        type: string
      size:
        type: integer
      uploaded_at:
        type: string
    type: object
  media.UploadURLRequest:
    properties:
      content_type:
        type: string
    required:
    - content_type
    type: object
  media.UploadURLResponse:
    properties:
      content_type:
        type: string
      expires_at:
        type: integer
      max_file_size:
        type: integer
      object_key:
        type: string
      upload_url:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  types.ReactionRequest:
    properties:
      emoji:
        $ref: '#/definitions/types.ReactionType'
    required:
    - emoji
    type: object
  types.ReactionType:
    enum:
    - "\U0001F44D"
    - ❤️
    - "\U0001F602"
    - "\U0001F62E"
    - "\U0001F622"
    - "\U0001F525"
    type: string
    x-enum-varnames:
    - ReactionThumbsUp
    - ReactionHeart
    - ReactionLaugh
    - ReactionSurprised
    - ReactionSad
    - ReactionFire
  types.StoryPostRequest:
    properties:
      audience_user_ids:
        items:
          type: string
        type: array
      media_key:
        type: string
      text:
        type: string
      visibility:
        $ref: '#/definitions/types.Visibility'
    required:
    - audience_user_ids
    - visibility
    type: object
  types.Visibility:
    enum:
    - PUBLIC
    - FRIENDS
    - PRIVATE
    type: string
    x-enum-varnames:
    - VisibilityPublic
    - VisibilityFriends
    - VisibilityPrivate
  users.SignInRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  users.SignUpRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  users.UserStats:
    properties:
      posted:
        type: integer
      reaction_counts:
        additionalProperties:
          type: integer
        type: object
      unique_viewers:
        type: integer
      views:
        type: integer
    type: object
info:
  contact: {}
  description: A simple stories service API
  title: Stories Service API
  version: "1.0"
paths:
  /feed:
    get:
      responses: {}
      security:
      - BearerAuth: []
      summary: Get stories feed
      tags:
      - stories
  /feed/cached:
    get:
      description: Get stories feed with Redis caching (30-60s TTL)
      responses:
        "200":
          description: Cached feed retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get cached stories feed
      tags:
      - stories
  /feed/optimized:
    get:
      description: Get stories feed with caching and preloaded metadata to avoid N+1
        queries
      responses:
        "200":
          description: Optimized feed retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get optimized stories feed
      tags:
      - stories
  /follow/{user_id}:
    delete:
      description: Unfollow a user to stop seeing their FRIENDS visibility stories
      parameters:
      - description: User ID to unfollow
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: User unfollowed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Follow relationship not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Unfollow a user
      tags:
      - users
    post:
      description: Follow another user to see their FRIENDS visibility stories
      parameters:
      - description: User ID to follow
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: User followed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Follow a user
      tags:
      - users
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User authenticated successfully with token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      summary: Authenticate a user
      tags:
      - users
  /me/stats:
    get:
      description: Get user statistics including posts, views, unique viewers, and
        reaction breakdown for the last 7 days
      produces:
      - application/json
      responses:
        "200":
          description: User statistics
          schema:
            $ref: '#/definitions/users.UserStats'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get user statistics
      tags:
      - users
  /media:
    get:
      description: List all media files uploaded by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Media files retrieved successfully
          schema:
            items:
              $ref: '#/definitions/media.MediaInfoResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: List user media files
      tags:
      - media
  /media/{object_key}:
    delete:
      description: Delete a specific media file
      parameters:
      - description: Object key
        in: path
        name: object_key
        required: true
        type: string
      responses:
        "200":
          description: Media file deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Media not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete media file
      tags:
      - media
  /media/{object_key}/download-url:
    get:
      description: Generate a presigned URL for downloading media files
      parameters:
      - description: Object key
        in: path
        name: object_key
        required: true
        type: string
      - description: 'Expiration time in seconds (default: 3600)'
        in: query
        name: expires
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Download URL generated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Media not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Generate presigned download URL
      tags:
      - media
  /media/{object_key}/info:
    get:
      description: Get information about a specific media file
      parameters:
      - description: Object key
        in: path
        name: object_key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media information retrieved successfully
          schema:
            $ref: '#/definitions/media.MediaInfoResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Media not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get media file information
      tags:
      - media
  /media/upload-url:
    post:
      consumes:
      - application/json
      description: Generate a presigned URL for uploading media files
      parameters:
      - description: Upload URL request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/media.UploadURLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Upload URL generated successfully
          schema:
            $ref: '#/definitions/media.UploadURLResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Generate presigned upload URL
      tags:
      - media
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - users
  /stories:
    post:
      consumes:
      - application/json
      description: Create a new story with authentication required
      parameters:
      - description: Story content
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/types.StoryPostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Story created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a new story
      tags:
      - stories
  /stories/{id}:
    get:
      description: Get a specific story by its ID with permission checks based on
        visibility and graph
      parameters:
      - description: Story ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Story retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - no permission to view this story
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Story not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get a story by ID
      tags:
      - stories
  /stories/{id}/reactions:
    post:
      consumes:
      - application/json
      description: Add an emoji reaction to a story and send real-time notification
        to author
      parameters:
      - description: Story ID
        in: path
        name: id
        required: true
        type: string
      - description: Reaction details
        in: body
        name: reaction
        required: true
        schema:
          $ref: '#/definitions/types.ReactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reaction added successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Story not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Add a reaction to a story with real-time notifications
      tags:
      - stories
  /stories/{id}/view:
    post:
      description: Record that a user has viewed a story (idempotent - one view per
        user) and send real-time notification to author
      parameters:
      - description: Story ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: View recorded successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Story not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Record a story view with real-time notifications
      tags:
      - stories
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
